plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id "com.github.spotbugs" version "5.+"
    id 'checkstyle'
    id "com.github.ben-manes.versions" version "0.+"
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'com.jolbox:bonecp:0.8.0.RELEASE'
    implementation 'com.j256.ormlite:ormlite-core:6.+'
    implementation 'com.j256.ormlite:ormlite-jdbc:6.+'
    implementation 'com.mysql:mysql-connector-j:8.+'
    implementation 'org.slf4j:slf4j-api:2.+'
    implementation 'ch.qos.logback:logback-core:1.+'
    implementation 'ch.qos.logback:logback-classic:1.+'
    implementation 'com.google.guava:guava:33.+'
    implementation 'org.eclipse.jetty:jetty-client:11.+'
    testImplementation 'junit:junit:4.+'
    testImplementation 'org.mockito:mockito-core:5.+'
    testImplementation 'org.hamcrest:hamcrest-integration:1.+'
    testImplementation 'org.eclipse.jetty:jetty-server:11.+'
    testImplementation 'jakarta.servlet:jakarta.servlet-api:6.+'
    testImplementation 'com.github.spotbugs:spotbugs-annotations:4.+'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.+'
    testImplementation 'com.googlecode.junit-toolbox:junit-toolbox:2.+'
    testImplementation 'org.awaitility:awaitility:4.+'
    testImplementation 'org.awaitility:awaitility-proxy:3.+'
}

group = 'com.github.seeker.commonj'
version = '0.3.3'
description = 'commonj'

java {
    sourceCompatibility = JavaVersion.VERSION_11

    withSourcesJar()
    withJavadocJar()
}

test {
	filter {
		excludeTestsMatching("*IT")
		excludeTestsMatching("AllUnitTests*")
	}
}

jacocoTestReport {
    dependsOn test
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

spotbugs {
    ignoreFailures = true
    reportLevel = 'default'
    effort = 'max'
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def isNonStable = { String version ->
  def unstableKeyword = ['alpha'].any { it -> version.toLowerCase().contains(it) }
  return unstableKeyword
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }
}

dependencyUpdates {
    gradleReleaseChannel = "current"
}

checkstyle {
    configFile = file("${rootProject.projectDir}/checkstyle.xml")
    configProperties 'checkstyle.header.file': file('HEADER-checkstyle')
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
